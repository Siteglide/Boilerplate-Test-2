

{% capture sitegurus_ui_uniq_component_id %}sitegurus_component_{% increment sitegurus_gen_uniq_component_id %}{% endcapture %}
{% capture form_html_id %}form_{{sitegurus_ui_uniq_component_id}}{% endcapture %}

<style>

/* Reset Siteglide Error Outline to Bootstrap Native */
.input-error:not([required]) {
  border: 0 !important;
}
.input-error.form-control:valid,.input-error.form-select:valid {
  border-color: #57DE8F !important;
}

/* Hide the Spinner by default */
.spinner-border {
  opacity: 0%;
  display: inline-block;
  margin-left: 10px;
}

/* While submitting, show the loading Spinner and run animation*/
.form_submitting .spinner-border {
  opacity: 100%;
}

#{{form_html_id}}:not([data-s-form-progress]) .progress,#{{form_html_id}}[data-s-form-progress='0'] .progress {
  display: none;
}

#{{form_html_id}}[data-s-form-progress='0'] .progress-bar{
	width: 0%;
  will-change: width;
  transition: width 0.8s;
  transition-timing-function: ease-out;
}

#{{form_html_id}}[data-s-form-progress='1'] .progress-bar{
	width: 10%;
}

#{{form_html_id}}[data-s-form-progress='2'] .progress-bar{
	width: 20%;
}

#{{form_html_id}}[data-s-form-progress='3'] .progress-bar{
	width: 30%;
}

#{{form_html_id}}[data-s-form-progress='4'] .progress-bar{
	width: 40%;
}

#{{form_html_id}}[data-s-form-progress='5'] .progress-bar{
	width: 50%;
}

#{{form_html_id}}[data-s-form-progress='6'] .progress-bar{
	width: 60%;
}

#{{form_html_id}}[data-s-form-progress='7'] .progress-bar{
	width: 80%;
}

#{{form_html_id}}[data-s-form-progress='8'] .progress-bar{
	width: 100%;
}
</style>
<section>
  <div class="container py-4">
    <div class="row">
      <div class="col-lg-7 mx-auto d-flex justify-content-center flex-column">
        {% form  html_id: form_html_id, html_class: "form needs-validation", html-novalidate: true -%}
          <div class="card-body">
            {% include "modules/module_86/form_layout_fields", collection: 'true', disable_fields: "Name" %}
            <h2 class="mb-5">{{this.properties.module_name}}</h2>
            <h3 class="h4 mb-3">Add Item</h3>
            <div class="row">
              {{context.exports.module_86.form_fields | html_safe: raw_text: true }}
              {{context.exports.module_86.form_hidden | html_safe: raw_text: true }}
            </div>
            {% assign form_addresses = context.exports.module_86.form_addresses | parse_json %}
            {% for address in form_addresses %}
              <h3 class="h4 mb-3">{{address[0]}}</h3>
              <div class="row">
                {{address[1].html | html_safe: raw_text: true}}
              </div>
            {% endfor %}
            {% if context.exports.module_86.form_payment != blank %}
              <h3 class="h4 mb-3">Payment Details</h3>
              <div class="row">
                {{context.exports.module_86.form_payment | html_safe: raw_text: true }}
              </div>
            {% endif %}
            {% if context.exports.module_86.form_recaptcha != blank %}
              <div class="row">
                {{context.exports.module_86.form_recaptcha | html_safe: raw_text: true }}
              </div>
            {% endif %}
            <div class="row">
              
              <div class="col-12">
                <button type="submit" class="btn bg-gradient-dark w-100">
                  <div class="d-flex align-items-center justify-content-center position-relative">
                    <span>Submit</span>
                    <div style="right: -3px;" class="spinner-border spinner-light spinner-border-sm position-absolute m-0 d-flex align-items-center justify-content-center" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </div>
                </button>
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <div class="my-2 progress" id="progressBar">
                  <div class="progress-bar" id="progressContent"></div>
                </div>
              </div>
            </div>
          </div>
        {% endform %}
      </div>
    </div>
  </div>
</section>
<script>
  /* The following optional script allows support for Bootstrap validation. If removing it, make sure to return the normal Siteglide submit function to the button. We use a self-executing function here so that variables and functions within are scoped only to this form. This allows each form to have its own editable, self-contained validation function. */
  (function () {
    //Make sure Sitegurus Form API is ready (used for checkboxes).
    if(typeof sGCheckboxValidation == "function") {
      initForm();
    } else {
      var forms_api_script = document.querySelector('#sitegurus_forms_javascript_api');
      if(forms_api_script) {
        forms_api_script.addEventListener('load', initForm);
      }
    }
    //Set up Form JS
    function initForm() {
      var form_html_id = "{{form_html_id}}";
      var form = document.querySelector('#'+form_html_id);
      var submitButton = form.querySelector('button[type=submit]');
      //Add BS support for checkboxes and radios to change events.
      var checksAndRadios = form.querySelectorAll('.required input[type=checkbox],.required input[type=radio]');
      checksAndRadios.forEach(
        function(item) {
          item.addEventListener('change', sGCheckboxValidation)
        }
      );
      //Define custom error function for Siteglide Form
      function sGFormCustomErrorBootsrap(error, error_details) {
        if(error.code) {
          if(error.code.length > 0) {
            error = error.code[0];
          } else {
            error = s_error_formatter(error);
          }
        } else {
          error = s_error_formatter(error);
        }
        //If main error is for a field that is missing a required value, give a human-friendly name.
        var fields_for_validation = form.querySelectorAll('[data-sg-validation-label]'), field_validation_map = {}, field_validation_ids = [], required_fields = form.querySelectorAll('[required]');
        fields_for_validation.forEach(function(field) {
          field_validation_ids.push(field.dataset.sgValidationId);
          field_validation_map[field.dataset.sgValidationId] = field.dataset.sgValidationLabel;
        });
        if(field_validation_ids.includes(error) || field_validation_ids.includes((error.replace(/\]\[\]/, '')))) {
          error = `Please enter a value for the required fields marked above.`
          //Use the commented line below instead if you want to print the first field with an error.
          //error = `please enter a value for the following: ${field_validation_map[error]}.`;
        } else if(error.includes('captcha')) {
          error = `Please confirm you are not a bot by completing the challenge.`;
        }
        //Display the errors
        if(typeof window.swal === 'function') {
          errorToast();
        } else {
          const script = document.querySelector('#sweetalert_script');
          script.addEventListener('load', errorToast);
        }
        function errorToast() {
          swal.fire({
            position: 'bottom-end',
            icon: 'error',
            title: error,
            showConfirmButton: true,
            toast: true,
            width: '24em',
            padding: '1.5rem',
            custom_class: {
              title: 'h6'
            },
            allowEscapeKey: true,
            allowOutsideClick: true,
            confirmButtonColor: 'var(--bs-danger)',
            timer: 8000
          });
        }
        //Scroll to error
        form.classList.add('was-validated');
        var fieldError = form.querySelector(':invalid');
        console.log('form', form, 'fieldError', fieldError)
        if(fieldError) {
        console.log('scrolling?')
          window.setTimeout(function() {
            fieldError.scrollIntoView({
              block: 'center',
              behaviour: 'auto'
            });
          },1);
        }
      }
      //Change Siteglide Form Submit Function to an Event Listener
      function sGFormSubmit(event) {
        event.preventDefault();
        sGCheckboxValidation(null, {form});
        form.classList.remove('was-validated');
        if(typeof tinymce === 'object' && typeof window.sgRichTextConfig) {
          window.sgRichTextConfig.forEach(
            function(item) {
              //Write rich text content to textarea field
              item.textarea.textContent = item.editor.getContent();
              //Apply Bootstrap validation
              var wrapper = item.textarea.closest('[data-sg-rich-text-wrapper]');
              if(wrapper) {
                if(item.textarea.hasAttribute('required') && item.textarea.textContent.length <= 1) {
                  wrapper.classList.add('is-invalid');
                  wrapper.classList.remove('is-valid');
                } else {
                  wrapper.classList.remove('is-invalid');
                  wrapper.classList.add('is-valid');
                }
              }
            }
          );
        }
        s_form_submit_v2(event.currentTarget,form_html_id, sGFormCustomErrorBootsrap);
      }
      submitButton.addEventListener('click', sGFormSubmit);
    }
  })();
</script>
{% if context.exports.sitebuilder.sweetalert == blank %}
	<script id="sweetalert_script" async src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	{% assign sweetalert = true %}
	{% export sweetalert, namespace: "sitebuilder" %}
{% endif %}
